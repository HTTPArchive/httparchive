/**
 * Generates custom-metrics/cms.js using the tests from Wappalyzer:
 *     https://github.com/AliasIO/Wappalyzer
 */
const fetch = require('node-fetch');
const fsp = require('fs-promise');

const CMS_DETECTOR_URL = 'https://raw.githubusercontent.com/AliasIO/Wappalyzer/master/src/apps.json';
const TMP_FILE = 'tmp/cmsDetector.js';
const OUTPUT_FILE = 'custom_metrics/cms.js';
const OUTPUT_TEMPLATE = `/**
 * IMPORTANT: Do not modify this file directly! It is generated by
 *   bin/cms-detector.js
 *
 * Detects the presence of Content Management Systems.
 *
 *
 * Built on https://github.com/AliasIO/Wappalyzer.
 * See https://github.com/AliasIO/Wappalyzer/blob/master/LICENSE.
 */

const cmsList = \${CMS_LIST};

function checkHtml(html) {
	return !!document.body.innerHTML.match(html);
}

function checkScript(script) {
	return !!document.querySelector(\`script[src*="\${script}"]\`)
}

function checkMeta(meta) {
	return Object.entries(meta).some(([attribute, value]) => {
		return !!document.querySelector(\`meta[\${attribute}*="\${value}"]\`);
	})
}

const cms = cmsList.reduce((cms, config) => {
	if (config.html && config.html.forEach) {
		config.html.forEach(html => {
			if (document.body.innerHTML.match(html)) {
				cms.add(config.name);
			}
		});
	}
	else if (config.html && config.html.push) {
		if (document.body.innerHTML.match(config.html)) {
			cms.add(config.name);
		}
	}
	if (config.script) {
		if (document.querySelector(\`script[src*="\${config.script}"]\`)) {
			cms.add(config.name);
		}
	}
	return cms;
}, new Set());

return JSON.stringify(Array.from(cms));
`;
const VERSION_FILE = 'custom_metrics/cms_detector_version.js'
const VERSION_TEMPLATE = `/**
 * IMPORTANT: Do not modify this file directly! It is generated by
 *   bin/cms-detector.js
 */

 return \${DETECTOR_VERSION};
`;

function getCmsDetector() {
	return fetch(CMS_DETECTOR_URL).then(res => res.json());
}

getCmsDetector().then(detector => {
	fsp.writeFile(TMP_FILE, JSON.stringify(detector, null, 2)).then(_ => {
		console.log(`CMS detector source code written to ${TMP_FILE}.`);
	});

	const [cmsId] = Object.entries(detector.categories).find(([i, cat]) => cat.name = 'CMS');
	const cmsList = Object.entries(detector.apps).filter(([name, config]) => {
		return config.cats.includes(cmsId);
	}).map(([name, config]) => {
		const {html, meta, script} = config;
		return {name, html, meta, script};
	}).filter(config => {
		return config.html || config.meta || config.script;
	});

	// Fill template variables.
	const output = OUTPUT_TEMPLATE.replace('${CMS_LIST}', JSON.stringify(cmsList));

	fsp.writeFile(OUTPUT_FILE, output)
		.then(_ => console.log(`CMS custom metric source code written to ${OUTPUT_FILE}.`))
		.catch(err => console.error(err));
});

// TODO: Use the version of AliasIO/Wappalyzer if/when available.
const version = Date.now();
const versionOutput = VERSION_TEMPLATE.replace('${DETECTOR_VERSION}', version);
fsp.writeFile(VERSION_FILE, versionOutput)
	.then(_ => console.log(`CMS detector version (${version}) written to ${VERSION_FILE}.`))
	.catch(err => console.error(err));
